<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nowcoder.community.dao.UserMapper">


<!--    用于替换查询的字段，以便复用 使用Include 标签调用id-->
  <sql id="selectFields">
      id,username,password,salt,email,type,status,activation_code,header_url,create_time
  </sql>
    <sql id="insertFields">
        username,password,salt,email,type,status,activation_code,header_url,create_time
    </sql>
    <!--    #{id} 将Mapper中的参数列表嵌入到sql-->
    <!--  resultType 因为在properties中定义了mybatis.type-aliases-package =com.nowcoder.community.entity
    所以这里的resultType 可以直接写User.否则要写全限定名.User-->
    <select id="selectById" resultType="User">
<!--        select id,username,password,salt,email,type,status,activation_code,header_url,create_time-->
        select<include refid="selectFields"></include>
        from user
        where id=#{id}
    </select>

    <select id="selectByName" resultType="User">
<!--        select id,username,password,salt,email,type,status,activation_code,header_url,create_time-->
        select<include refid="selectFields"></include>
        from user
        where username=#{username}
    </select>

    <select id="selectByEmail" resultType="User">
<!--        select id,username,password,salt,email,type,status,activation_code,header_url,create_time-->
        select<include refid="selectFields"></include>
        from user
        where email=#{email}
    </select>
<!--    parameterType 声明插入的数据的类型的实体类-->
<!--    keyProperty 声明自动生成的id在实体类的属性名，这里就是User类中的id-->
<!--    mybatis 从数据库中获取id然后回填到User实体类的id属性中-->
  <insert id="insertUser" parameterType="User" keyProperty="id">
      insert into user (<include refid="insertFields"></include>)
<!--      #[}中的是实体类的属性，要注意不是数据表的列名。-->
      values(#{username},#{password},#{salt},#{email},#{type},#{status},#{activationCode},#{headerUrl},#{createTime})
  </insert>
<!--往往update和insert需要声明参数类型，select需要声明返回值类型，也就是对应的实体类，但是这里的update比较简单就不声明了-->
    <update id="updateStatus">
        update user set status =#{status} where id=#{id}
    </update>
    <update id="updateHeader">
        update user set header_url =#{headerUrl} where id=#{id}
    </update>
    <update id="updatePassWord">
        update user set password =#{password} where id=#{id}
    </update>
</mapper>